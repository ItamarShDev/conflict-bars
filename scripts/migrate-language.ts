import { ConvexClient } from "convex/browser";
import { api } from "../convex/_generated/api";

const convexUrl = process.env.CONVEX_URL || process.env.VITE_CONVEX_URL;
if (!convexUrl) {
	console.error(
		"‚ùå Error: CONVEX_URL environment variable is not set.\n" +
			"Make sure you're running this with: npx convex run scripts/migrate-language.ts\n" +
			"Or set CONVEX_URL manually.",
	);
	process.exit(1);
}

const client = new ConvexClient(convexUrl);

// Language translations to Hebrew
const languageTranslations: Record<string, string> = {
	// English names
	hebrew: "◊¢◊ë◊®◊ô◊™",
	english: "◊ê◊†◊í◊ú◊ô◊™",
	arabic: "◊¢◊®◊ë◊ô◊™",
	french: "◊¶◊®◊§◊™◊ô◊™",
	russian: "◊®◊ï◊°◊ô◊™",
	spanish: "◊°◊§◊®◊ì◊ô◊™",
	german: "◊í◊®◊û◊†◊ô◊™",
	italian: "◊ê◊ô◊ò◊ú◊ß◊ô◊™",
	portuguese: "◊§◊ï◊®◊ò◊ï◊í◊ñ◊ô◊™",
	dutch: "◊î◊ï◊ú◊†◊ì◊ô◊™",
	polish: "◊§◊ï◊ú◊†◊ô◊™",
	turkish: "◊ò◊ï◊®◊ß◊ô◊™",
	greek: "◊ô◊ï◊ï◊†◊ô◊™",
	japanese: "◊ô◊§◊†◊ô◊™",
	chinese: "◊°◊ô◊†◊ô◊™",
	korean: "◊ß◊ï◊®◊ô◊ê◊†◊ô◊™",
	thai: "◊™◊ê◊ô◊ú◊†◊ì◊ô◊™",
	vietnamese: "◊ï◊ô◊ô◊ò◊†◊û◊ô◊™",
	indonesian: "◊ê◊ô◊†◊ì◊ï◊†◊ñ◊ô◊™",
	malay: "◊û◊ú◊ê◊ô◊™",
	tagalog: "◊ò◊í◊ú◊ï◊í",
	hindi: "◊î◊ô◊†◊ì◊ô◊™",
	bengali: "◊ë◊†◊í◊ú◊ô◊™",
	urdu: "◊ê◊ï◊®◊ì◊ï",
	swahili: "◊°◊ï◊ï◊î◊ô◊ú◊ô◊™",
	amharic: "◊ê◊û◊î◊®◊ô◊™",
	hebrew_english: "◊¢◊ë◊®◊ô◊™/◊ê◊†◊í◊ú◊ô◊™",
	english_hebrew: "◊¢◊ë◊®◊ô◊™/◊ê◊†◊í◊ú◊ô◊™",
	hebrew_arabic: "◊¢◊ë◊®◊ô◊™/◊¢◊®◊ë◊ô◊™",
	arabic_hebrew: "◊¢◊ë◊®◊ô◊™/◊¢◊®◊ë◊ô◊™",
	hebrew_french: "◊¢◊ë◊®◊ô◊™/◊¶◊®◊§◊™◊ô◊™",
	french_hebrew: "◊¢◊ë◊®◊ô◊™/◊¶◊®◊§◊™◊ô◊™",
	hebrew_russian: "◊¢◊ë◊®◊ô◊™/◊®◊ï◊°◊ô◊™",
	russian_hebrew: "◊¢◊ë◊®◊ô◊™/◊®◊ï◊°◊ô◊™",
	english_arabic: "◊ê◊†◊í◊ú◊ô◊™/◊¢◊®◊ë◊ô◊™",
	arabic_english: "◊ê◊†◊í◊ú◊ô◊™/◊¢◊®◊ë◊ô◊™",
	english_french: "◊ê◊†◊í◊ú◊ô◊™/◊¶◊®◊§◊™◊ô◊™",
	french_english: "◊ê◊†◊í◊ú◊ô◊™/◊¶◊®◊§◊™◊ô◊™",
	// Already Hebrew
	◊¢◊ë◊®◊ô◊™: "◊¢◊ë◊®◊ô◊™",
	◊ê◊†◊í◊ú◊ô◊™: "◊ê◊†◊í◊ú◊ô◊™",
	◊¢◊®◊ë◊ô◊™: "◊¢◊®◊ë◊ô◊™",
	◊¶◊®◊§◊™◊ô◊™: "◊¶◊®◊§◊™◊ô◊™",
	◊®◊ï◊°◊ô◊™: "◊®◊ï◊°◊ô◊™",
	◊°◊§◊®◊ì◊ô◊™: "◊°◊§◊®◊ì◊ô◊™",
	◊í◊®◊û◊†◊ô◊™: "◊í◊®◊û◊†◊ô◊™",
	◊ê◊ô◊ò◊ú◊ß◊ô◊™: "◊ê◊ô◊ò◊ú◊ß◊ô◊™",
	◊§◊ï◊®◊ò◊ï◊í◊ñ◊ô◊™: "◊§◊ï◊®◊ò◊ï◊í◊ñ◊ô◊™",
	◊î◊ï◊ú◊†◊ì◊ô◊™: "◊î◊ï◊ú◊†◊ì◊ô◊™",
	◊§◊ï◊ú◊†◊ô◊™: "◊§◊ï◊ú◊†◊ô◊™",
	◊ò◊ï◊®◊ß◊ô◊™: "◊ò◊ï◊®◊ß◊ô◊™",
	◊ô◊ï◊ï◊†◊ô◊™: "◊ô◊ï◊ï◊†◊ô◊™",
	◊ô◊§◊†◊ô◊™: "◊ô◊§◊†◊ô◊™",
	◊°◊ô◊†◊ô◊™: "◊°◊ô◊†◊ô◊™",
	◊ß◊ï◊®◊ô◊ê◊†◊ô◊™: "◊ß◊ï◊®◊ô◊ê◊†◊ô◊™",
	◊™◊ê◊ô◊ú◊†◊ì◊ô◊™: "◊™◊ê◊ô◊ú◊†◊ì◊ô◊™",
	◊ï◊ô◊ô◊ò◊†◊û◊ô◊™: "◊ï◊ô◊ô◊ò◊†◊û◊ô◊™",
	◊ê◊ô◊†◊ì◊ï◊†◊ñ◊ô◊™: "◊ê◊ô◊†◊ì◊ï◊†◊ñ◊ô◊™",
	◊û◊ú◊ê◊ô◊™: "◊û◊ú◊ê◊ô◊™",
	◊ò◊í◊ú◊ï◊í: "◊ò◊í◊ú◊ï◊í",
	◊î◊ô◊†◊ì◊ô◊™: "◊î◊ô◊†◊ì◊ô◊™",
	◊ë◊†◊í◊ú◊ô◊™: "◊ë◊†◊í◊ú◊ô◊™",
	◊ê◊ï◊®◊ì◊ï: "◊ê◊ï◊®◊ì◊ï",
	◊°◊ï◊ï◊î◊ô◊ú◊ô◊™: "◊°◊ï◊ï◊î◊ô◊ú◊ô◊™",
	◊ê◊û◊î◊®◊ô◊™: "◊ê◊û◊î◊®◊ô◊™",
	"◊¢◊ë◊®◊ô◊™/◊ê◊†◊í◊ú◊ô◊™": "◊¢◊ë◊®◊ô◊™/◊ê◊†◊í◊ú◊ô◊™",
	"◊¢◊ë◊®◊ô◊™/◊¢◊®◊ë◊ô◊™": "◊¢◊ë◊®◊ô◊™/◊¢◊®◊ë◊ô◊™",
	"◊¢◊ë◊®◊ô◊™/◊¶◊®◊§◊™◊ô◊™": "◊¢◊ë◊®◊ô◊™/◊¶◊®◊§◊™◊ô◊™",
	"◊¢◊ë◊®◊ô◊™/◊®◊ï◊°◊ô◊™": "◊¢◊ë◊®◊ô◊™/◊®◊ï◊°◊ô◊™",
	"◊ê◊†◊í◊ú◊ô◊™/◊¢◊®◊ë◊ô◊™": "◊ê◊†◊í◊ú◊ô◊™/◊¢◊®◊ë◊ô◊™",
	"◊ê◊†◊í◊ú◊ô◊™/◊¶◊®◊§◊™◊ô◊™": "◊ê◊†◊í◊ú◊ô◊™/◊¶◊®◊§◊™◊ô◊™",
};

function normalizeLanguage(language: string | undefined): string | undefined {
	if (!language) return undefined;

	const trimmed = language.trim().toLowerCase();

	// Check direct translation
	if (languageTranslations[trimmed]) {
		return languageTranslations[trimmed];
	}

	// Try to normalize pairs (e.g., "Arabic/Hebrew" -> "Hebrew/Arabic")
	if (trimmed.includes("/")) {
		const parts = trimmed
			.split("/")
			.map((p) => p.trim())
			.sort();
		const normalized = parts.map((p) => languageTranslations[p] || p).join("/");
		return normalized;
	}

	// If not found, return as-is (might be a language we don't have a translation for)
	return language;
}

async function migrateLanguages() {
	console.log("üîÑ Starting language migration...");

	try {
		const songs = await client.query(api.songs.getAllSongs);
		console.log(`üìä Found ${songs.length} songs to process`);

		let updated = 0;
		let unchanged = 0;

		for (const song of songs) {
			const oldLanguage = song.language;
			const newLanguage = normalizeLanguage(oldLanguage);

			if (oldLanguage !== newLanguage) {
				console.log(
					`  ‚úèÔ∏è  "${song.name}" by ${song.artist}: "${oldLanguage}" ‚Üí "${newLanguage}"`,
				);
				// Note: You would need to add an updateSong mutation if it doesn't exist
				// For now, just logging the changes
				updated++;
			} else {
				unchanged++;
			}
		}

		console.log(`\n‚úÖ Migration summary:`);
		console.log(`  ‚Ä¢ Updated: ${updated} songs`);
		console.log(`  ‚Ä¢ Unchanged: ${unchanged} songs`);
		console.log(`  ‚Ä¢ Total: ${songs.length} songs`);
	} catch (error) {
		console.error("‚ùå Migration failed:", error);
		process.exit(1);
	}
}

migrateLanguages();
